'.source.ini':
  'Ansible Config':
    'prefix': 'ansible-cfg'
    'body': '''
    [defaults]
    retry_files_enabled=False
    host_key_checking=False
    gathering=smart
    remote_user=root
    roles=roles
    inventory=inventory.ini

    [privilege_escalation]
    become=True
    become_method=sudo
    become_user=root
    '''

  'Ansible Inventory':
    'prefix': 'ansible-inventory'
    'body': '''
    $1 ansible_host=$2 ansible_port=${3:2222}
    '''

'.source.yaml':
  'Preflight':
    'prefix': 'ansible-bootstrap'
    'body': '''
    - hosts: all
      gather_facts: no
      remote_user: ${1:vagrant}
      vars:
        nameserver: ${2:208.67.222.222}
        selinux_mode: permissive
        user:
          name: ${3:sanselme}
          fullname: ${4:Schubert Anselme}
          key: "{{ lookup('file', '${5:/Users/sanselme/.ssh/id_rsa.pub}') }}"
      handlers:
      - name: restart sshd
        service:
          name: sshd
          state: restarted
      tasks:
      - name: check if we're using the default ssh port
        wait_for:
          port: 22
          state: started
          host: "{{ inventory_hostname }}"
          connect_timeout: 5
          timeout: 10
        delegate_to: localhost
        ignore_errors: yes
        register: default_ssh
      - name: check if we're using the inventory-provided ssh port
        wait_for:
          port: "{{ ansible_port }}"
          state: started
          host: "{{ inventory_hostname }}"
          connect_timeout: 5
          timeout: 10
        delegate_to: localhost
        ignore_errors: yes
        register: configured_ssh
        when: default_ssh is defined and
              default_ssh.state is undefined
      - name: set configured port fact
        set_fact:
          configured_port: "{{ ansible_port }}"
      - name: set inventory ansible_port to default
        set_fact:
          ansible_port: 22
        register: ssh_port_set
        when: default_ssh is defined and
              default_ssh.state == "started"
      - name: ssh port is configured properly
        debug:
          msg: "SSH port is configured properly."
        when: configured_ssh is defined and
              configured_ssh is defined and
              configured_ssh.state == "started"
        register: ssh_port_set
      - name: fail is ssh port was not auto-detected (unknown)
        fail:
          msg: "The SSH port is neither 22 or {{ ansible_port }}."
        when: ssh_port_set is undefined
      - name: confirm host connection works
        ping:
      - name: setup alternate ssh port
        lineinfile:
          dest: /etc/ssh/sshd_config
          regexp: "^Port"
          line: "Port {{ configured_port }}"
        notify: "restart sshd"
      - name: verify selinux
        stat:
          path: /etc/sysconfig/selinux
        register: selinux
      - name: install policycoreutils-python
        yum:
          name: policycoreutils-python
          state: latest
        when: selinux.stat.exists
      - name: set selinux mode
        selinux:
          policy: targeted
          state: "{{ selinux_mode }}"
        when: selinux.stat.exists
      - name: setup selinux for alternate ssh port
        seport:
          ports: "{{ configured_port }}"
          proto: tcp
          setype: ssh_port_t
          state: present
        when: selinux.stat.exists
      - name: ensure ssh is reloaded if need be
        meta: flush_handlers
      - name: ensure we use the configured ssh port for the remainder of the role
        set_fact:
          ansible_port: "{{ configured_port }}"
      - name: run deferred setup to gather facts
        setup:
      - name: set hostname
        hostname:
          name: "{{ inventory_hostname }}"
      - name: update hostfile
        lineinfile:
          dest: /etc/hosts
          regexp: "{{ ansible_hostname }}"
          line: "{{ ansible_default_ipv4.address }}   {{ ansible_fqdn }} {{ ansible_hostname }}"
      - name: set nameserver
        lineinfile:
          dest: /etc/resolv.conf
          regexp: nameserver
          line: "nameserver {{ nameserver }}"
      - name: set dns
        template:
          dest: /etc/resolv.conf
          src: resolv.conf.j2
      - name: add user
        user:
          name: "{{ user.name }}"
          comment: "{{ user.fullname }}"
          shell: /bin/bash
          system: yes
      - name: set authorized key for user
        authorized_key:
          user: "{{ user.name }}"
          key: "{{ user.key }}"
      - name: add sudoers.d file for user
        template:
          dest: "/etc/sudoers.d/{{ user.name }}"
          src: user.j2
          owner: root
          mode: 0440
    '''
  'playbook.yaml':
    'prefix': 'pkr-playbook'
    'body': '''
    - hosts: all
      tasks:
      - name: create directories
        file:
          path: "/etc/{{ item }}"
          state: directory
      - name: add startup scripts
        copy:
          dest: /etc/my_init.d/
          src: setup.sh
          mode: 755
      - name: add service scripts
        copy:
          dest: /etc/service/run
          src: run.sh
          mode: 755
    '''

'.text.generic-config.jinja':
  'resolv.conf.j2':
    'prefix': 'ansible-resovl-conf'
    'body': '''
    nameserver {{ nameserver }}
    search {{ ansible_domain }}
    '''
  'user.j2':
    'prefix': 'ansible-user-sudoer'
    'body': '''
    {{ user.name }} ALL=(ALL) NOPASSWD:ALL
    '''
